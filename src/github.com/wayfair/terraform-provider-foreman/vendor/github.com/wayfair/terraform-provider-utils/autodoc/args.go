package autodoc

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// NOTE(ALL): If you make modifications to the command line arguments, be
//   sure to update the documentation! This includes:
//
//   * The package comment in autodoc.go
//   * The Usage() function in autodoc.go
//   * The autodoc tool documentation in docs/autodoc.md

// Command line argument constants
const (
	// Assignment operator.  This separates the flag from the assigned value.
	argAssignment = "="
	// Name of the provider being documented
	argProviderName = "-provider"
	// Root of the output directory. mkdocs.yml will be generated here and the
	// documentation directory will fall under this path.
	argRootDir = "-root"
	// Name of the documentation directory for mkdocs.yml.  It will be placed
	// under the value supplied for -root
	argDocsDir = "-docs-dir"
	// Name of the templates directory.  Template files will be recursively
	// searched from this directory.
	argTemplatesDir = "-templates-dir"
	// File extension for template files
	argTemplateExt = "-template-ext"
	// Help flag - Show usage information
	argHelp = "-help"
)

// Default values for command line arguments (if it is not explicitly set)
const (
	// Name of the Terraform provider
	defaultProviderName = "Terraform Provider"
	// Name of the documentation directory
	defaultDocsDir = "docs"
	// Name of the templates directory
	defaultTemplatesDir = "templates"
	// File extension for templates
	defaultTemplateFileExt = ".template"
)

// -----------------------------------------------------------------------------
// Parsed Command Line Argument Definition
// -----------------------------------------------------------------------------

// NOTE(ALL): If you make modifications to the command line arguments, be
//   sure to update the documentation! This includes:
//
//   * The package comment in autodoc.go
//   * The Usage() function in autodoc.go
//   * The autodoc tool documentation in docs/autodoc.md

// Represents the parsed command line arguments
type parsedArgs struct {
	// The name of the provider being documented
	providerName string
	// The root output directory- mkdocs.yml will be placed here and the
	// documentation directory will be placed as a subdirectory to this root.
	rootDir string
	// The name of the documentation directory. All autogenerated markdown files
	// will be placed in this directory. The mkdocs.yml docs_dir will be set
	// to this value. docs_dir will be placed under the specified root dir.
	docsDir string
	// The location to read & load template files
	templatesDir string
	// The file extension for template files
	templateFileExt string
	// Whether or not the user wants to display the usage dialog
	help bool
}

// -----------------------------------------------------------------------------
// Command Line Argument Utility Functions
// -----------------------------------------------------------------------------

// parseArgs retrieves the command line arguments supplied when invoking
// the autodoc binary and parses them into a concrete implementation for use
// in other functions. Returns the parsed command line arguments on success
// or an error if encountered.
func parseArgs() (parsedArgs, error) {
	args := parsedArgs{}

	// Retrieve the supplied command line arguments
	rawArgs := os.Args

	// Iterate over each of the arguments. Index 0 contains the name/path of
	// the binary executed, skip this param
	for idx, val := range rawArgs[1:] {

		// Split on the first occurence of the argument assignment operator.
		// Index 0 contains the flag name, index 1 contains the argument value
		parsedArg := strings.SplitN(val, argAssignment, 2)
		argName := parsedArg[0]
		var argVal string

		if len(parsedArg) > 1 {
			argVal = parsedArg[1]
			if argVal == "" {
				return args, fmt.Errorf(
					"Malformatted argument at position [%d]: [%s]",
					idx,
					val,
				)
			}
		}

		// Determine the argument and set the value
		switch argName {
		case argProviderName:
			args.providerName = argVal
		case argRootDir:
			args.rootDir = argVal
		case argDocsDir:
			args.docsDir = argVal
		case argTemplatesDir:
			args.templatesDir = argVal
		case argTemplateExt:
			args.templateFileExt = argVal
		case argHelp:
			args.help = true
		default:
			return args, fmt.Errorf(
				"Unrecognized argument at position [%d]: [%s]",
				idx,
				val,
			)
		} //end switch
	} //end for

	// check the values of the arguments. Set the default values if needed.
	if args.providerName == "" {
		args.providerName = defaultProviderName
	}
	if args.rootDir == "" {
		// Get the current working directory- used in default values
		cwd, cwdErr := os.Getwd()
		if cwdErr != nil {
			return args, cwdErr
		}
		args.rootDir = cwd
	}
	if args.docsDir == "" {
		args.docsDir = filepath.Join(args.rootDir, defaultDocsDir)
	}
	if args.templatesDir == "" {
		args.templatesDir = filepath.Join(args.rootDir, defaultTemplatesDir)
	}
	if args.templateFileExt == "" {
		args.templateFileExt = defaultTemplateFileExt
	}

	return args, nil
}
